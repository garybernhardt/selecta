#!/usr/bin/env bash
# vim: set ft=ruby:

# This file executes as a bash script, which turns around and executes Ruby via
# the line below. The -x argument to Ruby makes it discard everything before
# the second "!ruby" shebang. This allows us to work on Linux, where the
# shebang can only have one argument so we can't directly say
# "#!/usr/bin/env ruby --disable-gems". Thanks for that, Linux.
#
# If this seems confusing, don't worry. You can treat it as a normal Ruby file
# starting with the "!ruby" shebang below.

exec /usr/bin/env ruby --disable-gems -x "$0" $*
#!ruby

if RUBY_VERSION < '1.9.3'
  abort "error: Selecta requires Ruby 1.9.3 or higher."
end

require "optparse"
require "io/console"

KEY_CTRL_C = ?\C-c
KEY_CTRL_N = ?\C-n
KEY_CTRL_P = ?\C-p
KEY_CTRL_W = ?\C-w
KEY_DELETE = 127.chr # Equivalent to ?\C-?

class Selecta
  def main
    # We have to parse options before trying to read the input in case the user
    # did '-h', an invalid option, etc. and we need to terminate.
    options = Configuration.parse_options(ARGV)
    config = Configuration.from_inputs($stdin.readlines, options)
    search = Search.blank(config)

    search = run_in_screen(config, search)
    puts search.selected_choice
  end

  # Initialize the screen (and tear it down properly when done).
  def run_in_screen(config, search)
    Screen.with_screen do |screen, tty|
      # We emit the number of lines we'll use later so we don't clobber whatever
      # was already on the screen.
      config.visible_choices.times { tty.puts }
      begin
        ui_event_loop(search, screen, tty)
      ensure
        # Always move the cursor to the bottom so the next program doesn't draw
        # over whatever we left on the screen.
        screen.move_cursor(screen.height - 1, 0)
      end
    end
  end

  # Use the search and screen to process user actions until they quit.
  def ui_event_loop(search, screen, tty)
    while not search.done?
      Renderer.render!(search, screen)
      search = handle_key(search, tty.get_char)
    end
    search
  end

  # On each keystroke, generate a new search object
  def handle_key(search, key)
    case key

    when KEY_CTRL_N then search.down
    when KEY_CTRL_P then search.up

    when KEY_CTRL_W then search.delete_word
    when KEY_DELETE then search.backspace

    when ?\r then search.done
    when KEY_CTRL_C then raise SystemExit

    when /[[:print:]]/ then search.append_search_string(key.chr)

    else search
    end
  end
end

class Configuration < Struct.new(:visible_choices, :initial_search, :choices)
  def initialize(visible_choices, initialize, choices)
    # Constructor is defined to force argument presence; otherwise Struct
    # defaults missing arguments to nil
    super
  end

  def self.from_inputs(choices, options)
    choices = massage_choices(choices)
    Configuration.new(20, options.fetch(:search), choices)
  end

  def self.default_options
    parse_options([])
  end

  def self.parse_options(argv)
    options = {}

    parser = OptionParser.new do |opts|
      opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

      opts.on("-h", "--help", "Show this message") do |v|
        puts opts
        exit
      end

      options[:search] = ""
      opts.on("-s", "--search SEARCH", "Specify an initial search string") do |search|
        options[:search] = search
      end
    end

    begin
      parser.parse!(argv)
    rescue OptionParser::InvalidOption => e
      $stderr.puts e
      $stderr.puts parser
      exit 1
    end

    options
  end

  def self.massage_choices(choices)
    choices.map do |choice|
      # Encoding to UTF-8 with `:invalid => :replace` isn't good enough; it
      # still leaves some invalid characters. For example, this string will fail:
      #
      # echo "девуш\xD0:" | selecta
      #
      # Round-tripping through UTF-16, with `:invalid => :replace` as well,
      # fixes this. I don't understand why. I found it via:
      #
      # http://stackoverflow.com/questions/2982677/ruby-1-9-invalid-byte-sequence-in-utf-8
      utf16 = choice.encode('UTF-16', 'UTF-8', :invalid => :replace, :replace => '')
      utf16.encode('UTF-8', 'UTF-16')
    end.map(&:strip)
  end
end

class Search
  attr_reader :choices, :index, :query, :config

  def initialize(vars)
    @vars = vars
    @config = vars.fetch(:config)
    @choices = vars.fetch(:choices)
    @index = vars.fetch(:index)
    @query = vars.fetch(:query)
    @done = vars.fetch(:done)
  end

  def self.blank(config)
    new(:config => config,
        :choices => config.choices,
        :index => 0,
        :query => config.initial_search,
        :done => false)
  end

  def merge(vars)
    Search.new(@vars.merge(vars))
  end

  def done?
    @done
  end

  def selected_choice
    raise SystemExit if matches.empty?
    matches.fetch(@index)
  end

  def down
    index = [@index + 1, matches.count - 1, config.visible_choices - 1].min
    merge(:index => index)
  end

  def up
    merge(:index => [@index - 1, 0].max)
  end

  def append_search_string(string)
    merge(:index => 0,
          :query => @query + string)
  end

  def backspace
    merge(:index => 0,
          :query => @query[0...-1])
  end

  def delete_word
    merge(:query => @query.sub(/[^ ]* *$/, ""))
  end

  def matches
    @choices.map do |choice|
      [choice, Respecta.new(choice).score(query)]
    end.select do |choice, score|
      score > 0.0
    end.sort_by do |choice, score|
      -score
    end.map do |choice, score|
      choice
    end
  end

  def done
    merge(:done => true)
  end
end


class Respecta
  attr_reader :haystack

  # text - the text to be searched
  def initialize(text)
    @haystack = Haystack.new text
  end

  # Returns a score between 0 (no match) and 1 (perfect match) for how well
  # `abbreviation` matches `text`.
  def score(abbreviation)
    return 1 if haystack.text == abbreviation || abbreviation.nil? || abbreviation.empty?
    return 0 if abbreviation.length > haystack.text.length

    # Find all possible locations where abbreviation matches the haystack text.
    matches = match_locations haystack.text, abbreviation
    # Score each match and return maximum.
    matches.map { |m| haystack.score m }.max || 0
  end

  private

  # Returns all the locations in `haystack` where the `needle` matches.
  #
  # Examples:
  #
  #     match_locations('hello world', 'l')   -> [ [2], [3], [9] ]
  #     match_locations('hello world', 'lo')  -> [ [2,4], [2,7], [3,4], [3,7] ]
  #     match_locations('hello world', 'lod') -> [ [2,4,10], [2,7,10], [3,4,10], [3,7,10] ]
  #     match_locations('hello world', 'z')   -> [ [] ]
  #
  # This is the only non-trivial part of Respecta ;)
  #
  # This can be achieved in a number of ways and is potentially a hotspot.
  # The implementation below is the fastest I know of:
  #
  # - http://lists.lrug.org/pipermail/chat-lrug.org/2013-October/009583.html
  def match_locations(haystack, needles)
    indices = Hash[haystack.
                   each_char.
                   with_index.
                   group_by { |(char, _)| char }.
                   map { |(char, values)| [char, values.map { |(_, index)| index }] }]

    return [[]] unless indices[needles[0]]
    results = indices[needles[0]].map { |i| [i] }
    needles[1..-1].each_char do |char|
      results = results.flat_map do |r|
        return [[]] unless indices[char]
        indices[char].drop_while { |i| i < r.last }.map { |i| r + [i] }
      end
    end

    results
  end
end

class Haystack
  DEFAULT_LETTER_SCORE    = 1
  START_OF_WORD_BONUS     = 1
  CONTIGUOUS_LETTER_BONUS = 1

  attr_reader :text

  # text - the string to be searched.
  def initialize(text)
    @text = text
  end

  # Returns the quality of the match as a score between 0 (no match)
  # and 1 (perfect match).
  #
  # indexes - the locations of the letters in `text` which are matched.
  def score(indexes)
    absolute_score(indexes).to_f / maximum_score
  end

  private

  # Returns the quality of the match as an integer score.
  #
  # indexes - the locations of the letters in `text` which are matched.
  def absolute_score(indexes)
    total_individual_score = indexes.reduce(0) { |sum, index| sum + individual_letter_scores[index] }
    total_contiguous_score = contiguous_letters_score indexes
    total_individual_score + total_contiguous_score
  end

  # Returns the score you get when the search string matches the `text`.
  def maximum_score
    max_score_from_individual_letters = individual_letter_scores.reduce(:+)
    max_score_from_contiguous_letters = text.length - 1
    max_score_from_individual_letters + max_score_from_contiguous_letters
  end

  # Returns an array where each element is the score of the corresponding
  # character in `text`.
  def individual_letter_scores
    @scores ||= begin
      # every letter starts with a default score
      scores = Array.new text.length, DEFAULT_LETTER_SCORE

      # first letter of each "word" gets a bonus
      text.chars.each_with_index do |c, i|
        if i == 0 || text[i - 1] =~ /[^a-zA-Z0-9]/ || c =~ /[A-Z]/
          scores[i] += START_OF_WORD_BONUS
        end
      end

      scores
    end
  end

  # Returns an integer count of the number of contiguous values in `indexes`.
  # The initial value in a run of contiguous values is not tallied.
  #
  # Example: [ 1, 5, 6, 9, 11, 12, 13 ] -> 3
  def contiguous_letters_score(indexes)
    indexes.drop(1).each_with_index.reduce(0) do |sum, (value, i)|
      sum += CONTIGUOUS_LETTER_BONUS if value == indexes[i] + 1
      sum
    end
  end

end


class Renderer < Struct.new(:search, :screen)
  def self.render!(search, screen)
    rendered = Renderer.new(search, screen).render
    start_line = screen.height - search.config.visible_choices - 1
    screen.with_cursor_hidden do
      screen.write_lines(start_line, rendered.choices)
      screen.move_cursor(start_line, rendered.search_line.length)
    end
  end

  def render
    search_line = "> " + search.query
    matches = search.matches
    unless matches.empty?
      matches[search.index] = Text[:inverse, matches.fetch(search.index), :reset]
    end
    matches = correct_match_count(matches)
    lines = [search_line] + matches
    Rendered.new(lines, search_line)
  end

  def correct_match_count(matches)
    limited = matches[0, search.config.visible_choices]
    padded = limited + [""] * (search.config.visible_choices - limited.length)
    padded
  end

  class Rendered < Struct.new(:choices, :search_line)
  end
end

class Screen
  def self.with_screen
    TTY.with_tty do |tty|
      screen = self.new(tty)
      screen.configure_tty
      begin
        yield screen, tty
      ensure
        screen.restore_tty
        tty.puts
      end
    end
  end

  attr_reader :tty, :ansi

  def initialize(tty)
    @tty = tty
    @ansi = ANSI.new(tty.out_file)
    @original_stty_state = tty.stty("-g")
  end


  def configure_tty
    # raw: Disable input and output processing
    # -echo: Don't echo keys back
    # cbreak: Set up lots of standard stuff, including INTR signal on ^C
    tty.stty("raw -echo cbreak")
  end

  def restore_tty
    tty.stty("#{@original_stty_state}")
  end

  def suspend
    restore_tty
    begin
      yield
      configure_tty
    rescue
      restore_tty
    end
  end

  def with_cursor_hidden(&block)
    ansi.hide_cursor!
    begin
      block.call
    ensure
      ansi.show_cursor!
    end
  end

  def height
    size[0]
  end

  def width
    size[1]
  end

  def size
    height, width = tty.winsize
    [height, width]
  end

  def move_cursor(line, column)
    ansi.setpos!(line, column)
  end

  def write_line(line, text)
    write(line, 0, text)
  end

  def write_lines(line, texts)
    texts.each_with_index do |text, index|
      write(line + index, 0, text)
    end
  end

  def write(line, column, text)
    # Discard writes outside the main screen area
    write_unrestricted(line, column, text) if line < height
  end

  def write_unrestricted(line, column, text)
    text = Text[:default, text] unless text.is_a? Text
    write_text_object(line, column,text)
  end

  def write_text_object(line, column, text)
    text.components.each do |component|
      if component.is_a? String
        ansi.setpos!(line, column)
        # Don't draw off the edge of the screen.
        #   - (column + component.length) is the number of bytes we'd draw if
        #     we just dumped the string out.
        #   - Subtracting that from width gives the number of bytes we should
        #     draw to avoid going off the edge of the screen.
        #   - Subtracting 1 from that gives us the zero-indexed location of the
        #     last character we should draw.
        chars_to_draw = width - (column + component.length) - 1
        component = component[0..chars_to_draw]
        ansi.addstr!(component)
        column += component.length
      elsif component == :inverse
        ansi.inverse!
      elsif component == :reset
        ansi.reset!
      else
        if component =~ /_/
          fg, bg = component.to_s.split(/_/).map(&:to_sym)
        else
          fg, bg = component, :default
        end
        ansi.color!(fg, bg)
      end
    end
    remaining_cols = [width - column, 0].max
    ansi.addstr!(" " * remaining_cols)
  end
end

class Text
  attr_reader :components

  def self.[](*args)
    new(args)
  end

  def initialize(components)
    @components = components
  end

  def ==(other)
    components == other.components
  end

  def +(other)
    Text[*(components + other.components)]
  end
end

class ANSI
  ESC = 27.chr

  attr_reader :file

  def initialize(file)
    @file = file
  end

  def escape(sequence)
    ESC + "[" + sequence
  end

  def clear
    escape "2J"
  end

  def hide_cursor
    escape "?25l"
  end

  def show_cursor
    escape "?25h"
  end

  def setpos(line, column)
    escape "#{line + 1};#{column + 1}H"
  end

  def addstr(str)
    str
  end

  def color(fg, bg=:default)
    fg_codes = {
      :black => 30,
      :red => 31,
      :green => 32,
      :yellow => 33,
      :blue => 34,
      :magenta => 35,
      :cyan => 36,
      :white => 37,
      :default => 39,
    }
    bg_codes = {
      :black => 40,
      :red => 41,
      :green => 42,
      :yellow => 43,
      :blue => 44,
      :magenta => 45,
      :cyan => 46,
      :white => 47,
      :default => 49,
    }
    fg_code = fg_codes.fetch(fg)
    bg_code = bg_codes.fetch(bg)
    escape "#{fg_code};#{bg_code}m"
  end

  def inverse
    escape("7m")
  end

  def reset
    escape("0m")
  end

  def clear!(*args); write clear(*args); end
  def setpos!(*args); write setpos(*args); end
  def addstr!(*args); write addstr(*args); end
  def color!(*args); write color(*args); end
  def inverse!(*args); write inverse(*args); end
  def reset!(*args); write reset(*args); end
  def hide_cursor!(*args); write hide_cursor(*args); end
  def show_cursor!(*args); write show_cursor(*args); end

  def write(bytes)
    file.write(bytes)
  end
end

class TTY < Struct.new(:in_file, :out_file)
  def self.with_tty(&block)
    File.open("/dev/tty", "r") do |in_file|
      File.open("/dev/tty", "w") do |out_file|
        tty = TTY.new(in_file, out_file)
        block.call(tty)
      end
    end
  end

  def get_char
    in_file.getc
  end

  def puts
    out_file.puts
  end

  def winsize
    out_file.winsize
  end

  def stty(args)
    command("stty #{args}")
  end

  private

  # Run a command with the TTY as stdin, capturing the output via a pipe
  def command(command)
    IO.pipe do |read_io, write_io|
      pid = Process.spawn(command, :in => "/dev/tty", :out => write_io)
      Process.wait(pid)
      raise "Command failed: #{command.inspect}" unless $?.success?
      write_io.close
      read_io.read
    end
  end
end

if $0 == __FILE__
  begin
    Selecta.new.main
  rescue SystemExit, Interrupt
    exit(1)
  end
end
